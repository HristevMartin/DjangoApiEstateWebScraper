"""
Django settings for UK_Estate_Agent_Official project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import logging
import os
from datetime import timedelta
from pathlib import Path

from UK_Estate_Agent_Official.utils import get_env_variable

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-y@fj8bc#5)u2j(py*6dt@v37pwnfmq13-lqyr2bzs66_w^yso7"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['django-estate-agent-dot-gym-pro-410823.uc.r.appspot.com', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "UK_Estate_app",
    "rest_framework_simplejwt",
    "auth_app",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "UK_Estate_app.pagination.StandardResultsSetPagination",
    "PAGE_SIZE": 8,
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "UK_Estate_Agent_Official.urls"

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=10),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "ACCESS_TOKEN_CLASS": "auth_app.tokens.CustomToken",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "UK_Estate_Agent_Official.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Assuming get_env_variable is a function that retrieves environment variables.
# def get_env_variable(var_name, default=None):
#     """Retrieve environment variable or return a default value."""
#     return os.environ.get(var_name, default)
#
# local = get_env_variable("DEBUG") == "True"
# NAME = get_env_variable("NAME")
# USER = get_env_variable("USER")
# PASSWORD = get_env_variable("PASSWORD")
# HOST = get_env_variable("HOST")
# PORT = get_env_variable("PORT")
# DB_SOCKET = get_env_variable("DB_SOCKET")
#
# if local:
#     logging.info('Configuring for LOCAL MySQL')
#     DATABASES = {
#         "default": {
#             "ENGINE": "django.db.backends.mysql",
#             "NAME": NAME,
#             "USER": USER,
#             "PASSWORD": PASSWORD,
#             "HOST": HOST,
#             "PORT": PORT,
#         }
#     }
# else:
#     logging.info('SHOW ME THE CLOUD DATABASE NAME', NAME)
#
#     DATABASES = {
#         'default': {
#             "ENGINE": "django.db.backends.mysql",
#             "NAME": 'estate_buildings_uk',
#             "USER": 'root',
#             "PASSWORD": '123456',
#             "HOST": "127.0.0.1",
#             "PORT": "3307",
#             # "HOST": "/cloudsql/gym-pro-410823:europe-west1:estate-agent-db",
#         }
#     }
#     #     'default': {
#     #         "ENGINE": "django.db.backends.mysql",
#     #         "NAME": NAME,
#     #         "USER": USER,
#     #         "PASSWORD": PASSWORD,
#     #         "HOST": DB_SOCKET,
#     #     }
#     # }


ENVIRONMENT = get_env_variable("ENVIRONMENT")
NAME = get_env_variable("NAME")
USER = get_env_variable("USER")
PASSWORD = get_env_variable("PASSWORD")
HOST = get_env_variable("HOST")
PORT = get_env_variable("PORT")
DB_SOCKET = get_env_variable("DB_SOCKET")

if ENVIRONMENT == "development":
    print('development')
    logging.info('Configuring for LOCAL environment')
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": NAME,
            "USER": USER,
            "PASSWORD": PASSWORD,
            "HOST": HOST,
            "PORT": PORT,
        }
    }
elif ENVIRONMENT == "production":
    logging.info('Configuring for CLOUD environment')
    print('local cloud')
    if DB_SOCKET:
        print('in here')
        DATABASES = {
            'default': {
                "ENGINE": "django.db.backends.mysql",
                "NAME": NAME,
                "USER": USER,
                "PASSWORD": PASSWORD,
                "HOST": DB_SOCKET
            }
        }
    else:
        print('not here')
        logging.info('Configuring for local cloud connection')

        DATABASES = {
            'default': {
                "ENGINE": "django.db.backends.mysql",
                "NAME": 'estate_buildings_uk',
                "USER": 'root',
                "PASSWORD": '123456',
                "HOST": "127.0.0.1",
                "PORT": '3307'
            }
        }
else:
    logging.error(f"Unknown ENVIRONMENT '{ENVIRONMENT}' specified.")

AUTH_USER_MODEL = "auth_app.CustomUser"

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "https://gym-pro-410823.web.app",
]
